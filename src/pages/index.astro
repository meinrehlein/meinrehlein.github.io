<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- Ensure proper scaling on mobile -->
  <meta charset="UTF-8">
  <title>Jannis Reinelt - Responsive Layout</title>
  
  <style>
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: Arial, sans-serif;
      overflow-x: hidden;
    }

    /* MOBILE LAYOUT */
    .mobile-layout {
      display: block;  /* Default to showing on small screens */
    }

    .mobile-layout .container {
      height: 100%;
      overflow-y: scroll;
    }

    .mobile-layout .rectangle {
      width: 100%;
      height: 50vh;  /* Each rectangle takes 50% of viewport height */
      display: flex;
      justify-content: center;  /* Center horizontally */
      align-items: center;  /* Center vertically */
      background-color: black;
    }

    .mobile-layout .inner {
      width: 80%;
      height: 15vh;
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: black;
    }

    /* Links in the mobile layout (fades in when becoming visible) */
    .mobile-layout .word {
      font-size: 4vw;
      opacity: 0;  /* Start hidden */
      transition: opacity 0.5s ease-in-out;
      text-decoration: none;
      color: white;
    }

    .mobile-layout .visible .word {
      opacity: 1; /* Fade-in */
    }

    /* DESKTOP LAYOUT (Hidden by default to show only on larger screens) */
    @media only screen and (min-width: 768px) {
      .desktop-layout {
        display: block;  /* Show desktop layout */
      }
      
      .mobile-layout {
        display: none;  /* Hide mobile layout on larger screens */
      }

      .desktop-layout .rectangle {
        width: 25%;  /* Each desktop rectangle takes 25% of screen width */
        height: 100vh;
        float: left;
        position: relative;
        cursor: pointer;
        background-color: black;
      }
      
      .desktop-layout .word {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: rgb(231, 145, 145);
        font-size: 2.7vw;
        opacity: 0;
        transition: 0.5s ease-in-out;
      }

      /* Hover effect to reveal words on desktop layout */
      .desktop-layout .rectangle:hover .word {
        opacity: 1;
      }
    }

  </style>
</head>
<body>
  <!-- Mobile layout (Appears on smaller screen sizes) -->
  <div class="mobile-layout container">
    <div class="rectangle">
      <div class="inner">
        <a href="/aboutme" class="word">About Me</a>  
      </div>
    </div>

    <div class="rectangle">
      <div class="inner">
        <a href="/projects" class="word">Projects</a>
      </div>
    </div>

    <div class="rectangle">
      <div class="inner">
        <a href="/aboutmywork" class="word">About My Work</a>
      </div>
    </div>

    <div class="rectangle">
      <div class="inner">
        <a href="/contact" class="word">Contact Me</a>
      </div>
    </div>
  </div>

  <!-- Desktop layout (Appears on larger screen sizes) -->
  <div class="desktop-layout">
    <div class="rectangle">
      <a href="/aboutme" style="text-decoration: none;">
        <div class="word">About Me</div>
      </a>
    </div>

    <div class="rectangle">
      <a href="/projects" style="text-decoration: none;">
        <div class="word">Projects</div>
      </a> 
    </div>

    <div class="rectangle">
      <a href="/aboutmywork" style="text-decoration: none;">
        <div class="word">About My Work</div>
      </a>
    </div>

    <div class="rectangle">
      <a href="/contact" style="text-decoration: none;">
        <div class="word">Contact Me</div>
      </a>
    </div>
  </div>

  <script>
    // JavaScript for mobile layout
    const inners = document.querySelectorAll('.mobile-layout .inner');

    // IntersectionObserver options for detecting in the 30%-40% zone
    const observerOptions = {
      root: null,
      rootMargin: '-30% 0px -60% 0px',
      threshold: 0
    };

    // Observer callback
    const observerCallback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');  // Add 'visible' to fade in
        } else {
          entry.target.classList.remove('visible');  // Remove 'visible' to fade out
        }
      });
    };

    // Create an Intersection Observer
    const observer = new IntersectionObserver(observerCallback, observerOptions);

    // Observe all inner rectangles (mobile layout)
    inners.forEach(inner => observer.observe(inner));
  </script>
</body>
</html>
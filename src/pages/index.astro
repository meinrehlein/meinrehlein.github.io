<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Jannis Reinelt - Responsive Layout</title>
  
  <style>
    /* Global styles */
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: Arial, sans-serif;
      overflow-x: hidden;
    }

    /* WHITE Background for the whole body */
    body {
      background-color: rgb(255, 255, 255); 
    }

    /* Common link styles no matter the layout */
    .word {
      font-size: 4vw;  
      text-decoration: none;
      color: white;
      transition: opacity 0.5s ease-in-out;  /* Smooth fade-in and out */
      opacity: 0;  /* Start hidden */
    }

    .visible .word {
      opacity: 1;  /* Fade in when the visible class is added */
    }

    /* Layout for DESKTOP - Big Screens */

    .desktop-layout {
      display: none; 
    }

    .desktop-layout .rectangle {
      width: 25%;  /* Each rectangle is 25% of the screen's width */
      height: 100vh;  /* Full viewport height */
      position: relative;
      float: left;
      cursor: pointer;
      background-color: rgb(0, 0, 0);  /* Black rectangles */
    }

    .desktop-layout .word {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: rgb(231, 145, 145); /* On hover, pinkish text */
      font-size: 2.7vw;  
    }
    
    .desktop-layout .rectangle:hover .word {
      opacity: 1;  /* Hover effect to show words */
    }

    /* Layout for MOBILE - Small Screens */

    .mobile-layout {
      display: block;  /* By default mobile layout is visible */
    }

    /* Outer rectangle takes 50% of the viewport height */
    .mobile-layout .rectangle {
      width: 100%;
      height: 50vh;
      display: flex;
      justify-content: center;  /* Center inner rectangle horizontally */
      align-items: center;  /* Center inner rectangle vertically */
      background-color: black;  /* Make outer rectangles fully black */
    }

    /* Inner rectangle centered, fully black */
    .mobile-layout .inner {
      width: 80%;
      height: 15vh;  /* Inner rectangle is 15% of viewport */
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: black;
    }

    /* Media query to SHOW Desktop Layouts & HIDE Mobile Layouts on large screens */
    @media only screen and (min-width: 768px) {
      .desktop-layout { 
        display: block; /* Show desktop layout on larger screens */
      }

      .mobile-layout {
        display: none; /* Hide mobile layout on larger screens */
      }
    }
  </style>
</head>
<body>
  <!-- Desktop Layout (to be shown on larger screens) -->
  <div class="desktop-layout">

    <div class="rectangle">
      <a href="/aboutme" style="text-decoration: none;">
        <div class="word">About Me</div>
      </a>
    </div>

    <div class="rectangle">
      <a href="/projects" style="text-decoration: none;">
        <div class="word">Projects</div>
      </a>
    </div>

    <div class="rectangle">
      <a href="/aboutmywork" style="text-decoration: none;">
        <div class="word">About My Work</div>
      </a>
    </div>

    <div class="rectangle">
      <a href="/contact" style="text-decoration: none;">
        <div class="word">Contact Me</div>
      </a>
    </div>

  </div>

  <!-- Mobile Layout (to be shown on smaller screens) -->
  <div class="mobile-layout container">
    <div class="rectangle">
      <div class="inner">
        <a href="/aboutme" class="word">About Me</a>
      </div>
    </div>

    <div class="rectangle">
      <div class="inner">
        <a href="/projects" class="word">Projects</a>
      </div>
    </div>

    <div class="rectangle">
      <div class="inner">
        <a href="/aboutmywork" class="word">About My Work</a>
      </div>
    </div>

    <div class="rectangle">
      <div class="inner">
        <a href="/contact" class="word">Contact Me</a>
      </div>
    </div>
  </div>

  <script>
    // JavaScript for the Mobile Layout (Intersection Observer)
    const inners = document.querySelectorAll('.mobile-layout .inner');

    // Intersection Observer options (30%-40% detection zone from viewport top)
    const observerOptions = {
      root: null,  // Root is the viewport
      rootMargin: '-30% 0px -60% 0px',  // Trigger between 30% and 40% of the viewport
      threshold: 0  // Trigger as soon as the rectangle enters this zone
    };

    // Observer callback to add or remove 'visible' class
    const observerCallback = (entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');  // Add 'visible' class to fade in
        } else {
          entry.target.classList.remove('visible');  // Remove 'visible'
        }
      });
    };

    // Create the Intersection Observer
    const observer = new IntersectionObserver(observerCallback, observerOptions);

    // Observe all inner rectangles in the mobile layout
    inners.forEach(inner => observer.observe(inner));
  </script>
</body>
</html>